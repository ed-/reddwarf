<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE article [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!-- Useful for specs -->
        <!ENTITY MAY    '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
        <!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
        <!ENTITY MUST   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
        <!ENTITY MUST_NOT   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>
]>

<article version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xml:id="cdb-getting-started"
         class="specification"
         status="draft">
    <?rax status.bar.text="BETA"?>
    <info>
        <title>Getting Started with Rackspace Cloud Database and
            Servers</title>
        <copyright>
            <year>2011</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0 BETA</releaseinfo>
    </info>
    <section xml:id="DB_Solution">
        <title>Overview</title>
        <para>Follow the steps described in this guide to use the
            Rackspace Cloud Database API and Cloud Servers section of
            Control Panel to create and access your database instances
            via Rackspace Cloud Servers.</para>
        <para>For details about using the Cloud Database API, refer to
            the <citetitle>Cloud Database Developer
                Guide</citetitle>.</para>
        <para>For issues with the Cloud Database API, please send
            email to the beta support list:
                <email>clouddb_beta@rackspace.com</email>.</para>
    </section>
    <section xml:id="DB_Sending_API_Requests">
        <title>Send Requests to the API</title>
        <para>You have several options for sending requests through an
            API: </para>
        <itemizedlist>
            <listitem>
                <para>Developers and testers may prefer to use cURL,
                    the command-line tool from <link
                        xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. </para>
                <para>With cURL you can send HTTP requests and receive
                    responses back from the command line. </para>
            </listitem>
            <listitem>
                <para>If you like to use a more graphical interface,
                    the ReST client for Firefox also works well for
                    testing and trying out commands, see <link
                        xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                        >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>. </para>
            </listitem>
            <listitem>
                <para>You can also download and install rest-client, a
                    Java application to test ReSTful web services,
                    from <link
                        xlink:href="http://code.google.com/p/rest-client/"
                        >http://code.google.com/p/rest-client/</link>. </para>
            </listitem>
        </itemizedlist>
        <section xml:id="using-curl-cli">
            <title>Send API Requests Using cURL</title>
            <para>cURL is a command-line tool that is available on
                most UNIX®-like environments and Mac OS X® and can be
                downloaded for Windows® in order to interact with the
                ReST interfaces. For more information on cURL, visit
                    <link xlink:href="http://curl.haxx.se/"
                    >http://curl.haxx.se/</link>. </para>
            <para> </para>
            <para>cURL allows you to transmit and receive HTTP requests and responses from the
                command-line or from within a shell script. This makes it possible to work with the ReST API
                directly without using one of the client APIs. </para>
            <para>The following cURL command-line options will be
                used:</para>
            <variablelist>
                <title>cURL Command-Line Options</title>
                <varlistentry>
                    <term><option>-d</option></term>
                    <listitem>
                        <para>Sends the specified data in a post
                            request to the HTTP server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-H HEADER</option></term>
                    <listitem>
                        <para>Specify an HTTP header in the request.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <note>
                <para>If you have the tools, you can run the cURL JSON
                    request examples with the following options to
                    format the output from cURL: <command>&lt;curl
                        JSON request example> | python
                        -mjson.tool</command>.</para>
            </note>
        </section>
    </section>
    <section xml:id="Generating_Auth_Token">
        <title>Generate an Authorization Token</title>
        <para>You need to generate a token whether you use cURL or a
            ReST client.</para>
        
        <para>In order to use the ReST API, you will first need to
            obtain an authorization token, which will need to be
            passed in for each request using the
                <code>X-Auth-Token</code> header. The following
            example demonstrates how to use cURL to obtain the
            authorization token and the URL of the storage
            system.</para>
        <para>Remember to replace the names in the examples below with
            their respective values:<itemizedlist>
                <listitem>
                    <para>your_username &mdash; The username supplied
                        here is your common Rackspace Cloud
                        username.</para>
                </listitem>
                <listitem>
                    <para>your_api_key &mdash; The key is your API
                        access key. The key can be obtained from the
                        Rackspace Cloud Control Panel in the Your
                        Account/API Access section.</para>
                </listitem>
            </itemizedlist></para>
        <example>
            <title>cURL Authenticate Request: XML</title>
            <?dbfo keep-together="always"?>
            <screen><command>curl</command> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?> \
&lt;credentials xmlns="http://docs.rackspacecloud.com/auth/api/v1.1" \
             username="your_username" \
             key="your_api_key"/>' \
<option>-H "Content-Type: application/xml"</option> \
<option>-H "Accept: application/xml"</option> \
<uri>https://auth.api.rackspacecloud.com/v1.1/auth</uri></screen>
        </example>
        <example>
            <title>cURL Authenticate Request: JSON</title>
            <?dbfo keep-together="always"?>
            <programlisting><command>curl</command> <option>-d</option> \
'{ \
    "credentials": {  \
        "username": "your_username",  \
        "key": "your_api_key"}  \
    }' \
<option>-H "Content-Type: application/json"</option> \
<uri>https://auth.api.rackspacecloud.com/v1.1/auth</uri>
                      </programlisting>
            
        </example>
        <example>
            <title>Authenticate Response: XML</title>
            <programlisting language="xml"><xi:include href="../../src/resources/samples/db-auth.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
        </example>
        <example>
            <title>Authenticate Response: JSON</title>
            <programlisting language="xml"><xi:include href="../../src/resources/samples/db-auth.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
        </example>
        <para>The authentication token <code>id</code> is returned
            along with an <code>expires</code> attribute that
            specifies when the token expires. The
                <code>publicURL</code> endpoint (for example
            https://servers.api.rackspacecloud.com/v1.0/1234) is also
            returned in the response. </para>
        <para>You will find the actual account number after the final
            '/' in the <code>publicURL</code> field. In this example,
            you can see that the account number is 1234.</para>
        <para>After authentication, you can use cURL to perform &GET;,
            &DELETE;, and &POST; requests for the Cloud Database
            API.</para>
        
    </section>
    <section xml:id="Service_Access_Endpoints-d1e753">
        <title>Service Access/Endpoints</title>
        <para>Specify a region to operate against by selecting an
            endpoint from the table below.</para>
        <?rax-fo keep-with-next?>
        <para>
            <table rules="all">
                <caption>Regionalized Service Endpoints</caption>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">Chicago (ORD)</td>
                        <td colspan="5"
                                ><code>https://ord.databases.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left" security="writeronly">
                        <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                        <td colspan="5"
                                ><code>https://dfw.databases.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left" security="writeronly">
                        <td colspan="2">London (LON)</td>
                        <td colspan="5">
                            <code>https://lon.databases.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                </tbody>
            </table>
        </para>
        <note>
            <title>Notes</title>
            <itemizedlist>
                <listitem>
                    <para>Additional service endpoints will be added
                        in the future.</para>
                </listitem>
                <listitem>
                    <para>The Cloud Server that you use in <xref
                            linkend="Create_Cloud_Server"/> must be
                        located in the same datacenter where your
                        database resides.</para>
                </listitem>
            </itemizedlist>
        </note>
        <remark>Writer: remove note above when additional endpoints
            are added to the table above.</remark>
        <para>Replace the sample account ID number,
                <parameter>1234</parameter>, with your actual account
            number returned as part of the authentication service
            response. Refer to <xref linkend="Generating_Auth_Token"
            />.</para>
    </section>
    <section xml:id="List_Flavors">
        <title>List Flavors</title>
        <para> A flavor is an available hardware configuration for a
            database instance. Each flavor has a unique combination of
            memory capacity and priority for CPU time.</para>
        <para>You need to use the List Flavors Details API to find the
            available configurations for your database instance, and
            then decide which size you need.</para>
        <para>This operation does not require a request body.</para>
        <para>The cURL requests for List Flavors Details are:</para>
        <example>
            <title>cURL List Flavors Details Request: XML</title>
            <programlisting><command>curl</command> \
<option>-H "X-Auth-Token: your_auth_token"</option> \
<option>-H "X-Auth-Project-ID: your_acct_id"</option> \
<option>-H "Accept: application/xml"</option> \
<uri>https://ord.databases.api.rackspacecloud.com/v1.0/your_acct_id/flavors/detail</uri>
                      </programlisting>
        </example>
        <example>
            <title>cURL List Flavors Details Request: JSON</title>
            <programlisting><command>curl</command> \
<option>-H "X-Auth-Token: your_auth_token"</option> \
<option>-H "X-Auth-Project-ID: your_acct_id"</option> \
<option>-H "Accept: application/json"</option> \
<uri>https://ord.databases.api.rackspacecloud.com/v1.0/your_acct_id/flavors/detail</uri>
                      </programlisting>
        </example>
        <para>Remember to replace the names in the examples above with
            their actual respective values for all the cURL examples
            that follow:<itemizedlist>
                <listitem>
                    <para>your_auth_token &mdash; as returned in your
                        authentication response</para>
                </listitem>
                <listitem>
                    <para>your_acct_id &mdash; as returned in your
                        authentication response</para>
                </listitem>
            </itemizedlist></para>
        <para>The following examples show the responses for List
            Flavors Details:</para>
        <example>
            <title>List Flavors Details Response: XML</title>
            <programlisting language="xml"><xi:include href="../../src/resources/samples/db-list-flavors-details-response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
        </example>
        <example>
            <title>List Flavors Details Response: JSON</title>
            <programlisting language="xml"><xi:include href="../../src/resources/samples/db-list-flavors-details-response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
        </example>
        <para>In the previous examples, you can see from the flavor
                <code>name</code> that there are multiple flavors
            available, including <code>medium</code> (with 1 virtual
            cpu and 2 gigabytes of memory) and <code>tiny</code> (with
            1 virtual cpu and 0.5 gigabytes of memory). </para>
        <para>In this example, assume that you decide to use the tiny
            flavor (id 1) for your database instance.</para>
    </section>
    
    <section xml:id="Create_DB_Instance">
            <title> Create a Database Instance with a Database </title>
            <para>Create a database instance with a database using the
            tiny flavor and volume size of 2 gigabytes (GB). </para>
        <para>Refer to <link
                xlink:href="http://docs-beta.rackspace.com/cdb/api/v1.0/cdb-devguide/content/POST_createDatabase__version__instances__instanceId__databases_databases.html"
                >Create Database</link> in the <citetitle>Cloud
                Database Developer Guide</citetitle> for the
            restrictions for choosing the database name.</para>
        <para>The example creates a database instance
                <code>myrackinstance</code>, with a database named
                <code>sampledb</code>, <code>utf8</code> character
            set, and <code>utf8_general_ci</code> collation, using the
            tiny flavor and volume size of 2 gigabytes (GB).</para>
        <para>Notice that the request specifies the flavor reference
                (<code>flavor</code>) to the tiny flavor (id 1)
            that was returned by the List Flavors Details call:
                <code>"https://ord.databases.api.rackspacecloud.com/v1.0/1234/flavors/1".</code></para>
        <para>The following examples show the cURL requests for Create
            Instance:</para>
        <example>
            <title>cURL Create Instance Request : XML</title>
            <programlisting><command>curl</command> <option>-d</option> \
'&lt;?xml version="1.0" ?> \
&lt;instance xmlns="http://docs.openstack.org/database/api/v1.0" \
    name="myrackinstance" \
    flavor= \
      "https://ord.databases.api.rackspacecloud.com/v1.0/1234/flavors/1"> \
    &lt;databases> \
        &lt;database name="sampledb" character_set="utf8" \
         collate="utf8_general_ci" /> \
    &lt;/databases> \
    &lt;volume size="2" /> \
&lt;/instance>' \
<option>-H "X-Auth-Token: your_auth_token"</option> \
<option>-H "X-Auth-Project-ID: your_acct_id"</option> \
<option>-H "Content-Type: application/xml"</option> \
<option>-H "Accept: application/xml"</option> \
<uri>https://ord.databases.api.rackspacecloud.com/v1.0/your_acct_id/instances</uri>
                      </programlisting>
        </example>
        <example>
            <title>cURL Create Instance Request : JSON</title>
            <programlisting><command>curl</command> <option>-d</option> \
'{ \
    "instance": { \
        "name": "myrackinstance", \
        "flavor": \
"https://ord.databases.api.rackspacecloud.com/v1.0/1234/flavors/1", \
        "databases": [ \
            { \
                "name": "sampledb", \
                "character_set": "utf8", \
                "collate": "utf8_general_ci" \
            } \
        ], \
        "volume": \
            { \
                "size": "2" \
            } \
    } \
}' \
<option>-H "X-Auth-Token: your_auth_token"</option> \
<option>-H "X-Auth-Project-ID: your_acct_id"</option> \
<option>-H "Content-Type: application/json"</option> \
<uri>https://ord.databases.api.rackspacecloud.com/v1.0/your_acct_id/instances</uri>
                      </programlisting>
        </example>
        <para>The following examples show the Create Instance
            responses:</para>
            
            <example>
                <title>Create Instance Response: XML</title>
                <programlisting language="xml"><xi:include href="../../src/resources/samples/db-create-database-instance-response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            
            <example>
                <title>Create Instance Response: JSON</title>
                <programlisting language="xml"><xi:include href="../../src/resources/samples/db-create-database-instance-response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
        </section>
    <section xml:id="Create_DB_User">
        <title>Create User </title>
        <para>Create a new user within the database instance. The user
            name and password are required.</para>
        <para>This operation asynchronously provisions a new user for
            the specified database instance and database, based on the
            configuration defined in the request. Once the request is
            validated and progress has started on the provisioning
            process, a 202 Accepted response object is
            returned.</para>
        <para xmlns="http://docbook.org/ns/docbook">The following
            examples show the cURL requests for Create User:</para>
        <example>
            <title>cURL Create User Request: XML</title>
            <programlisting><command>curl</command> <option>-d</option> \
'&lt;?xml version="1.0" ?> \
&lt;users xmlns="http://docs.openstack.org/database/api/v1.0"> \
    &lt;user name="simplestUserWithOneDatabase" \
         password="password" database="sampledb"/> \
    &lt;/user> \
&lt;/users>' \
<option>-H "X-Auth-Token: your_auth_token"</option> \
<option>-H "X-Auth-Project-ID: your_acct_id"</option> \
<option>-H "Content-Type: application/xml"</option> \
<option>-H "Accept: application/xml"</option> \
<uri>https://ord.databases.api.rackspacecloud.com/v1.0/your_acct_id/instances/instance_id/users</uri></programlisting>
        </example>
        <example>
            <?dbfo keep-together="always"?>
            <title>cURL Create User Request: JSON</title>
            <programlisting><command>curl</command> <option>-d</option> \
'{ \
    "users": [ \
        { \
            "name": "simplestUserWithOneDatabase", \
            "password": "password", \
            "database": "sampledb" \
        }, \
    ] \
}' \
<option>-H "X-Auth-Token: your_auth_token"</option> \
<option>-H "X-Auth-Project-ID: your_acct_id"</option> \
<option>-H "Content-Type: application/json"</option> \
<uri>https://ord.databases.api.rackspacecloud.com/v1.0/your_acct_id/instances/instance_id/users</uri></programlisting>
        </example>
        <para>Remember to replace the names in the examples above with
            their actual respective values:<itemizedlist>
                <listitem>
                    <para>your_auth_token &mdash; as returned in your
                        authentication response</para>
                </listitem>
                <listitem>
                    <para>your_acct_id &mdash; as returned in your
                        authentication response</para>
                </listitem>
                <listitem>
                    <para>instance_id &mdash; as returned in your
                        create instance response (see the response
                        examples in <xref linkend="Create_DB_Instance"
                        />)</para>
                </listitem>
            </itemizedlist></para>
        <para>This operation does not return a response body.</para>
    </section>
    <section xml:id="Create_Cloud_Server">
        <title>Create a New Cloud Server </title>
        <note>
            <para>If you are using an existing Cloud Server on your
                account, skip this step.</para>
        </note>
        <para>Create a Cloud Server. You can do this in the Cloud
            Servers section of our Control Panel (login here: <link
                xlink:href="https://manage.rackspacecloud.com/pages/Login.jsp;jsessionid=9AA14CFBD45D76A627F75FD95A854642.cp-n01"
                >Control Panel Login</link> ).</para>
        <procedure>
            <title>To create a Cloud Server using the Control
                Panel:</title>
            <step>
                <para> Choose an image from a list of different
                    operating systems, including Linux Distributions
                    and Windows Images:</para>
                <para><inlinemediaobject>
                         <imageobject>
                            <imagedata
                                fileref="Images/Choose_CS_Image.png"
                                contentwidth="6in"/>
                         </imageobject>
                    </inlinemediaobject></para>
            </step>
            <step>
                <para> Specify a name and select a size for your Cloud
                    Server, then click <guibutton>Create
                        Server</guibutton>. </para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata
                                fileref="Images/Create_CS.png"
                                contentwidth="6in"/>
                        </imageobject>
                    </inlinemediaobject></para>
            </step>
        </procedure>
        <note>
            <para>You can also create a Cloud Server using the Cloud
                Servers API. Refer to the <link
                    xlink:href="http://docs.rackspace.com/">Cloud
                    Servers API Developer Guide</link> for
                details.</para>
        </note>
    </section>
    <section xml:id="Configure_Cloud_Server">
        <title>Configure Your Existing Cloud Server </title>
        <para> To set up your existing Cloud Server with your database
            instance, you need the hostname and username/password when
            configuring your application. </para>
        <note>
            <title>Notes</title>
            <itemizedlist>
                <listitem>
                    <para>Routes will only need to be modified on
                        existing Cloud Server instances if you are
                        unable to access your database instance. New
                        instances should have the routes properly
                        added.</para>
                </listitem>
                <listitem>
                    <para>You should attempt to access your database
                        instances first, and only perform the
                        procedure for adding routing instructions if
                        you do <emphasis>not</emphasis> have
                        access.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>Refer to the appropriate procedure below, depending on
            your environment, for creating routing
            instructions.</para>
        <procedure>
            <title>To create routing instructions on a Debian-based
                Cloud Server distribution:</title>
            <step>
                <para> Edit the file
                        <filename>/etc/network/interfaces</filename>
                    and change the following lines from:</para>
                <para><code>up route add -net 10.176.0.0 netmask
                        255.248.0.0 gw {instance
                    specific}</code></para>
                <para><code>down route del -net 10.176.0.0 netmask
                        255.248.0.0 gw {instance
                    specific}</code></para>
                <para>to:</para>
                <para><code>up route add -net 10.176.0.0 netmask
                        255.240.0.0 gw {instance
                    specific}</code></para>
                <para><code>down route del -net 10.176.0.0 netmask
                        255.240.0.0 gw {instance
                    specific}</code></para>
                <note>
                    <para>Replace <code>{instance specific}</code>
                        with whatever is currently in the file.</para>
                </note>
            </step>
            <step>
                <para> Reboot your database instance. </para>
            </step>
        </procedure>
        <procedure>
            <title>To create routing instructions on a Redhat-based
                Cloud Server distribution (Redhat, CentOS):</title>
            <step>
                <para> Edit the file
                        <filename>/etc/sysconfig/static-routes</filename>
                    and change the following line from:</para>
                <para><code>any net 10.176.0.0 netmask 255.248.0.0 gw
                        {instance specific}</code></para>
                <para>to:</para>
                <para><code>any net 10.176.0.0 netmask 255.240.0.0 gw
                        {instance specific}</code></para>
                <note>
                    <para>Replace <code>{instance specific}</code>
                        with whatever is currently in the file.</para>
                </note>
            </step>
            <step>
                <para> Reboot your database instance. </para>
            </step>
        </procedure>
    </section>
    <section xml:id="MySQL_GUI_Admin">
        <title>MySQL GUI Administration</title>
        <para> If you do not want to access your database using the
            command line MySQL client, you can use a GUI tool such as
            phpMyAdmin to interact with your database instance. Common
            operations include managing databases, tables, fields,
            relations, indexes, users, and permissions. Included below
            is a procedure to set up phpMyAdmin on an Ubuntu 11.04
            Cloud Server. </para>
        <para>For more detailed installation configuration
            instructions see the phpMyAdmin documentation at: <link
                xlink:href="http://www.phpmyadmin.net/documentation/"
                >http://www.phpmyadmin.net/documentation/</link>. <note>
                <para>Rackspace does not provide phpMyAdmin support,
                    and the user is responsible for any security
                    related configuration.</para>
            </note></para>
        <procedure>
            <title>To install and configure phpMyAdmin on an Ubuntu
                11.04 Cloud Server:</title>
            <step>
                <para> Install phpMyAdmin:</para>
                <para>
                    <command>sudo apt-get install
                    phpmyadmin</command></para>
            </step>
            <step>
                <para> Set up a symbolic link to the phpmyadmin config
                    file:</para>
                <para><command>sudo ln -s /etc/phpmyadmin/apache.conf
                        /etc/apache2/conf.d/phpmyadmin.conf</command>
                </para>
            </step>
            <step>
                <para>Edit the
                        <code>/etc/phpmyadmin/config-db.php</code>
                    config file to point to your database
                    instance:</para>
                <para><command>$dbserver='&lt;cloud database
                        hostname>';</command>
                </para>
            </step>
            <step>
                <para>Restart apache:</para>
                <para><command>sudo apachectl restart</command></para>
            </step>
            <step>
                <para>Access phpMyAdmin at
                    http://&lt;your_ipaddress>/phpMyAdmin:</para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="Images/phpMyAdmin.png"
                                contentwidth="6in"/>
                        </imageobject>
                    </inlinemediaobject></para>
            </step>
        </procedure>
    </section>
</article>
